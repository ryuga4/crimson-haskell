
==================== FINAL INTERFACE ====================
2018-02-21 19:05:55.182264128 UTC

interface crimson-0.1.0.0-ZgWOCOdOiY63Gd2yNM7cG:State 8022
  interface hash: bc0564dc0b6ab06a3db7838e8535cb34
  ABI hash: 87ebba245be2872f3a329636cc87a225
  export-list hash: 776397d748b9a99da16e68f997e3eee2
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ee786260bc7750de2ee1b770d5857729
  sig of: Nothing
  used TH splices: False
  where
exports:
  State.addClient
  State.addPlayer
  State.initial
  State.initialRoom
  State.initialState
  State.join
  State.leave
  State.GameState{State.GameState}
  State.Room{State.Room clients gameState roomName}
  State.State{State.State rooms}
module dependencies: Parser
package dependencies: SHA-1.6.4.2 aeson-1.2.4.0 aeson-utils-0.3.0.2
                      array-0.5.2.0 attoparsec-0.13.2.2 base-4.10.1.0 base-compat-0.9.3
                      base64-bytestring-1.0.0.1 binary-0.8.5.1 blaze-builder-0.4.0.2
                      bytestring-0.10.8.2 case-insensitive-1.2.0.10 containers-0.5.10.2
                      deepseq-1.4.3.0 dlist-0.8.0.4 entropy-0.3.8 ghc-boot-th-8.2.2
                      ghc-prim-0.5.1.1 hashable-1.2.6.1 integer-gmp-1.0.1.0
                      integer-logarithms-1.0.2 network-2.6.3.3 primitive-0.6.3.0
                      random-1.1 scientific-0.3.5.2 streaming-commons-0.1.19 tagged-0.8.5
                      template-haskell-2.12.0.0 text-1.2.2.2 time-1.8.0.2
                      time-locale-compat-0.1.1.3 transformers-0.5.2.0 unix-2.7.2.2
                      unordered-containers-0.2.8.0 uuid-types-1.0.3 vector-0.12.0.1
                      websockets-0.12.3.1 zlib-0.6.1.2
orphans: network-2.6.3.3:Network.Socket
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         hashable-1.2.6.1:Data.Hashable.Generic text-1.2.2.2:Data.Text.Lazy
         text-1.2.2.2:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.2.2:Data.Text.Show
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.2.0:Control.Monad.Trans.Error
         base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: aeson-1.2.4.0:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.10.1.0:Control.Applicative base-4.10.1.0:Data.Complex
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Compose
                         base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray tagged-0.8.5:Data.Tagged
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2:Data.Text text-1.2.2.2:Data.Text.Lazy
                         unordered-containers-0.2.8.0:Data.HashMap.Base
                         unordered-containers-0.2.8.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
                         zlib-0.6.1.2:Codec.Compression.Zlib.Stream
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  containers-0.5.10.2:Data.Map.Internal 33ddbf5aa8c0f2ab26fb6dc5be1b1f4c
import  -/  containers-0.5.10.2:Data.Map.Strict 194f5b0a9785a91a43562790aa6787fc
import  -/  containers-0.5.10.2:Data.Map.Strict.Internal 63726a19357ba6ce3637c9bcf7d38b1e
import  -/  Parser 709dd72ff3e2579dae08f12ab55bd49f
  exports: 6cadcf87f1277ab3d4e75018b572d6a5
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  text-1.2.2.2:Data.Text 179ed20f3e41d2270f9a36dd7f638215
import  -/  text-1.2.2.2:Data.Text.Internal 965a1ec05875083803dc83d56dbb61f7
import  -/  websockets-0.12.3.1:Network.WebSockets.Connection fa086e6885d5698d4461f254c83078d3
976bbbfde72f7779024dcd63e1f4be4a
  $fEqRoom :: GHC.Classes.Eq State.Room
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ State.Room State.$fEqRoom_$c== State.$fEqRoom_$c/= -}
976bbbfde72f7779024dcd63e1f4be4a
  $fEqRoom_$c/= :: State.Room -> State.Room -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)LL),1*U(1*U(U,U,U),A,A)><S(S(LLS)LL),1*U(1*U(U,U,U),A,A)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: State.Room) (y :: State.Room) ->
                 case State.$fEqRoom_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
976bbbfde72f7779024dcd63e1f4be4a
  $fEqRoom_$c== :: State.Room -> State.Room -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),A,A)><S(S(SSS)LL),1*U(1*U(U,U,U),A,A)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: State.Room) (w1 :: State.Room) ->
                 case w of ww { State.Room ww1 ww2 ww3 ->
                 case ww1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case w1 of ww8 { State.Room ww9 ww10 ww11 ->
                 case ww9 of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                 State.$w$c== ww5 ww6 ww7 ww13 ww14 ww15 } } } }) -}
976bbbfde72f7779024dcd63e1f4be4a
  $fOrdRoom :: GHC.Classes.Ord State.Room
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ State.Room
                  State.$fEqRoom
                  State.$fOrdRoom_$ccompare
                  State.$fOrdRoom_$c<
                  State.$fOrdRoom_$c<=
                  State.$fOrdRoom_$c>
                  State.$fOrdRoom_$c>=
                  State.$fOrdRoom_$cmax
                  State.$fOrdRoom_$cmin -}
976bbbfde72f7779024dcd63e1f4be4a
  $fOrdRoom_$c< :: State.Room -> State.Room -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),A,A)><S(S(SSS)LL),1*U(1*U(U,U,U),A,A)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: State.Room) (w1 :: State.Room) ->
                 case w of ww { State.Room ww1 ww2 ww3 ->
                 case ww1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case w1 of ww8 { State.Room ww9 ww10 ww11 ->
                 case ww9 of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                 State.$w$c< ww5 ww6 ww7 ww13 ww14 ww15 } } } }) -}
976bbbfde72f7779024dcd63e1f4be4a
  $fOrdRoom_$c<= :: State.Room -> State.Room -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),A,A)><S(S(SSS)LL),1*U(1*U(U,U,U),A,A)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: State.Room) (w1 :: State.Room) ->
                 case w of ww { State.Room ww1 ww2 ww3 ->
                 case ww1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case w1 of ww8 { State.Room ww9 ww10 ww11 ->
                 case ww9 of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                 State.$w$c<= ww5 ww6 ww7 ww13 ww14 ww15 } } } }) -}
976bbbfde72f7779024dcd63e1f4be4a
  $fOrdRoom_$c> :: State.Room -> State.Room -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),A,A)><S(S(SSS)LL),1*U(1*U(U,U,U),A,A)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: State.Room) (w1 :: State.Room) ->
                 case w of ww { State.Room ww1 ww2 ww3 ->
                 case ww1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case w1 of ww8 { State.Room ww9 ww10 ww11 ->
                 case ww9 of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                 State.$w$c> ww5 ww6 ww7 ww13 ww14 ww15 } } } }) -}
976bbbfde72f7779024dcd63e1f4be4a
  $fOrdRoom_$c>= :: State.Room -> State.Room -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),A,A)><S(S(SSS)LL),1*U(1*U(U,U,U),A,A)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: State.Room) (w1 :: State.Room) ->
                 case w of ww { State.Room ww1 ww2 ww3 ->
                 case ww1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case w1 of ww8 { State.Room ww9 ww10 ww11 ->
                 case ww9 of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                 State.$w$c>= ww5 ww6 ww7 ww13 ww14 ww15 } } } }) -}
976bbbfde72f7779024dcd63e1f4be4a
  $fOrdRoom_$ccompare ::
    State.Room -> State.Room -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(1*U(U,U,U),A,A)><S(S(SSS)LL),1*U(1*U(U,U,U),A,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: State.Room) (ds1 :: State.Room) ->
                 case ds of wild { State.Room ds2 ds3 ds4 ->
                 case ds1 of wild1 { State.Room ds5 ds6 ds7 ->
                 Data.Text.$fOrdText_$ccompare ds2 ds5 } }) -}
976bbbfde72f7779024dcd63e1f4be4a
  $fOrdRoom_$cmax :: State.Room -> State.Room -> State.Room
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(U(U,U,U),U,U)><S(S(SSS)LL),1*U(U(U,U,U),U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: State.Room) (w1 :: State.Room) ->
                 case w of ww { State.Room ww1 ww2 ww3 ->
                 case ww1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case w1 of ww8 { State.Room ww9 ww10 ww11 ->
                 case ww9 of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                 case Data.Text.$w$ccompare ww5 ww6 ww7 ww13 ww14 ww15 of wild {
                   DEFAULT
                   -> State.Room (Data.Text.Internal.Text ww13 ww14 ww15) ww10 ww11
                   GHC.Types.GT
                   -> State.Room
                        (Data.Text.Internal.Text ww5 ww6 ww7)
                        ww2
                        ww3 } } } } }) -}
976bbbfde72f7779024dcd63e1f4be4a
  $fOrdRoom_$cmin :: State.Room -> State.Room -> State.Room
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)LL),1*U(U(U,U,U),U,U)><S(S(SSS)LL),1*U(U(U,U,U),U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: State.Room) (w1 :: State.Room) ->
                 case w of ww { State.Room ww1 ww2 ww3 ->
                 case ww1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 case w1 of ww8 { State.Room ww9 ww10 ww11 ->
                 case ww9 of ww12 { Data.Text.Internal.Text ww13 ww14 ww15 ->
                 case Data.Text.$w$ccompare ww5 ww6 ww7 ww13 ww14 ww15 of wild {
                   DEFAULT -> State.Room (Data.Text.Internal.Text ww5 ww6 ww7) ww2 ww3
                   GHC.Types.GT
                   -> State.Room
                        (Data.Text.Internal.Text ww13 ww14 ww15)
                        ww10
                        ww11 } } } } }) -}
b01aeb290e9559ac4a28601988e23088
  $fShowGameState :: GHC.Show.Show State.GameState
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ State.GameState
                  State.$fShowGameState_$cshowsPrec
                  State.$fShowGameState_$cshow
                  State.$fShowGameState_$cshowList -}
b01aeb290e9559ac4a28601988e23088
  $fShowGameState1 :: State.GameState -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*H><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: State.GameState) (eta :: GHC.Base.String) ->
                 case ds of wild { State.GameState ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n State.$fShowGameState2)
                   eta }) -}
bdcb274b2b5e7c4bc6065a2e92e0f6cb
  $fShowGameState2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   State.$fShowGameState3) -}
56f79922fd0811e4702f0bcfb18a30ea
  $fShowGameState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GameState"#) -}
b01aeb290e9559ac4a28601988e23088
  $fShowGameState_$cshow :: State.GameState -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*H>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: State.GameState) ->
                 case x of wild { State.GameState -> State.$fShowGameState2 }) -}
b01aeb290e9559ac4a28601988e23088
  $fShowGameState_$cshowList :: [State.GameState] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ State.GameState
                   State.$fShowGameState1) -}
b01aeb290e9559ac4a28601988e23088
  $fShowGameState_$cshowsPrec ::
    GHC.Types.Int -> State.GameState -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*H><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: State.GameState)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild { State.GameState ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n State.$fShowGameState2)
                   eta }) -}
976bbbfde72f7779024dcd63e1f4be4a
  $fShowRoom :: GHC.Show.Show State.Room
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ State.Room
                  State.$fShowRoom_$cshowsPrec
                  State.$fShowRoom_$cshow
                  State.$fShowRoom_$cshowList -}
976bbbfde72f7779024dcd63e1f4be4a
  $fShowRoom1 :: State.Room -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <L,1*U(A,1*U,1*H)><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: State.Room) (s :: GHC.Base.String)[OneShot] ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (State.$fShowRoom_$cshow x))
                   s) -}
1b123c6aaf49b2aac62187711913a21d
  $fShowRoom2 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
976bbbfde72f7779024dcd63e1f4be4a
  $fShowRoom_$cshow :: State.Room -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(A,1*U,1*H)>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: State.Room) ->
                 case State.$w$cshow w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Types.Char ww1 ww2 }) -}
976bbbfde72f7779024dcd63e1f4be4a
  $fShowRoom_$cshowList :: [State.Room] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [State.Room]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ State.Room State.$fShowRoom1 ls s) -}
976bbbfde72f7779024dcd63e1f4be4a
  $fShowRoom_$cshowsPrec ::
    GHC.Types.Int -> State.Room -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><L,1*U(A,1*U,1*H)><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x :: State.Room)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      (State.$fShowRoom_$cshow x))
                   s) -}
05af46e11f13e5d9e67ce5349d2c6718
  $fShowRoom_go ::
    [(Data.Text.Internal.Text,
      Network.WebSockets.Connection.Connection)]
    -> [Data.Text.Internal.Text]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
322def29c284da5beec181754e9055fc
  $fShowState :: GHC.Show.Show State.State
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ State.State
                  State.$fShowState_$cshowsPrec
                  State.$fShowState_$cshow
                  State.$fShowState_$cshowList -}
322def29c284da5beec181754e9055fc
  $fShowState1 :: State.State -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (w :: State.State) -> State.$w$cshowsPrec 0# w) -}
7823155a467550a9bd7d2ee193ec8b01
  $fShowState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
0e26766ad7a46940beb223af7d19afdc
  $fShowState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("rooms = "#) -}
7e00d67244d30541b45a31af00397a33
  $fShowState4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("State {"#) -}
13471280de5a23946be9639f3e2d9f43
  $fShowState5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# State.$fShowState2) -}
322def29c284da5beec181754e9055fc
  $fShowState_$cshow :: State.State -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (x :: State.State) ->
                 GHC.CString.unpackAppendCString#
                   State.$fShowState4
                   (GHC.CString.unpackAppendCString#
                      State.$fShowState3
                      (Data.Map.Internal.$w$cshowsPrec
                         @ Data.Text.Internal.Text
                         @ State.Room
                         Data.Text.Show.$fShowText
                         State.$fShowRoom
                         0#
                         x `cast` (State.N:State[0])
                         State.$fShowState5))) -}
322def29c284da5beec181754e9055fc
  $fShowState_$cshowList :: [State.State] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ State.State
                   State.$fShowState1) -}
322def29c284da5beec181754e9055fc
  $fShowState_$cshowsPrec ::
    GHC.Types.Int -> State.State -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: State.State) ->
                 case w of ww { GHC.Types.I# ww1 -> State.$w$cshowsPrec ww1 w1 }) -}
74b1cdd5336b5762091d1fa387bbcb05
  $sinsertWith_$sgo8 ::
    (a1 -> a1 -> a1)
    -> Data.Text.Internal.Text
    -> a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
  {- Arity: 4,
     Strictness: <L,1*C1(C1(U))><S(SSS),1*U(U,U,U)><L,U><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a1
                   (w :: a1 -> a1 -> a1)
                   (w1 :: Data.Text.Internal.Text)
                   (w2 :: a1)
                   (w3 :: Data.Map.Internal.Map Data.Text.Internal.Text a1) ->
                 case w1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 State.$w$sgo8 @ a1 w ww1 ww2 ww3 w2 w3 }) -}
03083672223b39f0d73687f49ccb4874
  $tc'GameState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6180729968911171411##
                   16387153057362573384##
                   State.$trModule
                   State.$tc'GameState2
                   0#
                   State.$tc'GameState1) -}
5c93f37d5f161dbd31e7b521a07efe56
  $tc'GameState1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
623cb852fd8c46cfbff37914928469ec
  $tc'GameState2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS State.$tc'GameState3) -}
feda283d11fa143c9cd478ea7c7c93c8
  $tc'GameState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'GameState"#) -}
e451c91de7eb073bf9c10b15d96cd2b5
  $tc'Room :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16496340554824581297##
                   3629907936902051031##
                   State.$trModule
                   State.$tc'Room2
                   0#
                   State.$tc'Room1) -}
d13d717728641e7ed8ee7dc528a7e1f7
  $tc'Room1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
eaa94850f462fced836288a29109788e
  $tc'Room2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS State.$tc'Room3) -}
c37dbe7b09f99aeacbaee5a6a4510f24
  $tc'Room3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Room"#) -}
c4cef9d10496ce788bc30419f9b808d9
  $tc'State :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18394047999605115164##
                   3299168889101875880##
                   State.$trModule
                   State.$tc'State2
                   0#
                   State.$tc'State1) -}
b82b0bc51fb5dbb969949b7894ae3f3b
  $tc'State1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
fd4d5e4d92a34b7ca86453676d03320a
  $tc'State2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS State.$tc'State3) -}
bb0ed2d46448d44fd55b53203a263b10
  $tc'State3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'State"#) -}
73d4737b47befd1f361fe82a268cc605
  $tcGameState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15501441908038132284##
                   2865825930182766706##
                   State.$trModule
                   State.$tcGameState1
                   0#
                   GHC.Types.krep$*) -}
0a476f960a4b809417754b7328cfab8c
  $tcGameState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS State.$fShowGameState3) -}
5ac26f9404aee32e3bf6efb3cfd13941
  $tcRoom :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5691715565854475544##
                   16013616566584540439##
                   State.$trModule
                   State.$tcRoom1
                   0#
                   GHC.Types.krep$*) -}
eacf6297680bfd9ccd98b74fb1c7e674
  $tcRoom1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS State.$tcRoom2) -}
7e052359349a9ed5fc7cdeebf35efa77
  $tcRoom2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Room"#) -}
be5565e4c4a4c54885c966020e055f5e
  $tcState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15848402199748880233##
                   7264141549133491177##
                   State.$trModule
                   State.$trModule1
                   0#
                   GHC.Types.krep$*) -}
948691a8ad0fa432b1ec627c36607600
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module State.$trModule3 State.$trModule1) -}
c91d26c32fc22cb45de783bc049db957
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS State.$trModule2) -}
b4e858e25586bcb95b9d2717613cd415
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("State"#) -}
2ac471ee4d6562d3b58a3b164609c21c
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS State.$trModule4) -}
e1854e6782213adbe758409dfe62d2ce
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("crimson-0.1.0.0-ZgWOCOdOiY63Gd2yNM7cG"#) -}
cbf18b0ffb0d97e726e3cb6a73c61c5c
  $w$c< ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,U><S,U><S,U><S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.ByteArray#)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: GHC.Prim.Int#) ->
                 case Data.Text.$w$ccompare ww ww1 ww2 ww3 ww4 ww5 of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
75d607c60d1b331765a72014ce720c7d
  $w$c<= ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,U><S,U><S,U><S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.ByteArray#)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: GHC.Prim.Int#) ->
                 case Data.Text.$w$ccompare ww ww1 ww2 ww3 ww4 ww5 of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
cf62b69d7d115698c997d1b40c4c5e02
  $w$c== ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,U><L,U><S,U><L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.ByteArray#)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww2 ww5) of wild2 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case {__pkg_ccall text-1.2.2.2 GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Prim.Int# #)}
                             ww
                             (GHC.Prim.int2Word# ww1)
                             ww3
                             (GHC.Prim.int2Word# ww4)
                             (GHC.Prim.int2Word# ww2)
                             GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                      case GHC.Prim.narrow32Int# ds3 of wild {
                        DEFAULT -> GHC.Types.False 0# -> GHC.Types.True } } }) -}
08a849537eac0cf3852e789375e1fd7b
  $w$c> ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,U><S,U><S,U><S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.ByteArray#)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: GHC.Prim.Int#) ->
                 case Data.Text.$w$ccompare ww ww1 ww2 ww3 ww4 ww5 of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
82329d9146f08d7f6680c47ded697606
  $w$c>= ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,U><S,U><S,U><S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Prim.ByteArray#)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: GHC.Prim.Int#) ->
                 case Data.Text.$w$ccompare ww ww1 ww2 ww3 ww4 ww5 of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
976bbbfde72f7779024dcd63e1f4be4a
  $w$cshow :: State.Room -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 1, Strictness: <L,1*U(A,1*U,1*H)>, Inline: [0],
     Unfolding: (\ (w :: State.Room) ->
                 (# GHC.Show.$fShow(,)4,
                    case w of wild { State.Room ds ds1 ds2 ->
                    case ds2 of wild1 { State.GameState ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      State.$fShowGameState2
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,)_$sgo1
                            State.$fShowRoom2
                            (\ (s :: GHC.Base.String)[OneShot] ->
                             GHC.Show.showList__
                               @ Data.Text.Internal.Text
                               Data.Text.Show.$fShowText1
                               (State.$fShowRoom_go ds1)
                               s)
                            (GHC.Types.[] @ GHC.Show.ShowS))) } } #)) -}
322def29c284da5beec181754e9055fc
  $w$cshowsPrec :: GHC.Prim.Int# -> State.State -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: State.State) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = Data.Map.Internal.$w$cshowsPrec
                       @ Data.Text.Internal.Text
                       @ State.Room
                       Data.Text.Show.$fShowText
                       State.$fShowRoom
                       0#
                       w `cast` (State.N:State[0])
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        State.$fShowState4
                        (GHC.CString.unpackAppendCString#
                           State.$fShowState3
                           (f (GHC.CString.unpackAppendCString# State.$fShowState2 x)))
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           State.$fShowState4
                           (GHC.CString.unpackAppendCString#
                              State.$fShowState3
                              (f (GHC.CString.unpackAppendCString#
                                    State.$fShowState2
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))))) }) -}
8548080a5b1f8dce37cc487447d9629f
  $w$sgo8 ::
    (a1 -> a1 -> a1)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
  {- Arity: 6,
     Strictness: <L,1*C1(C1(U))><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
b01aeb290e9559ac4a28601988e23088
  data GameState = GameState
976bbbfde72f7779024dcd63e1f4be4a
  data Room
    = Room {roomName :: Data.Text.Internal.Text,
            clients :: [(Data.Text.Internal.Text,
                         Network.WebSockets.Connection.Connection)],
            gameState :: State.GameState}
322def29c284da5beec181754e9055fc
  newtype State
    = State {rooms :: Data.Map.Internal.Map
                        Data.Text.Internal.Text State.Room}
08b1d520124aeeb8a0482352d641f6fa
  addClient ::
    State.Room
    -> Data.Text.Internal.Text
    -> Network.WebSockets.Connection.Connection
    -> State.Room
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U(U,U,U)><L,U><L,U>m,
     Unfolding: InlineRule (3, True, False)
                (\ (r :: State.Room)
                   (n :: Data.Text.Internal.Text)
                   (c :: Network.WebSockets.Connection.Connection) ->
                 case r of wild { State.Room ds ds1 ds2 ->
                 State.Room
                   ds
                   (GHC.Types.:
                      @ (Data.Text.Internal.Text,
                         Network.WebSockets.Connection.Connection)
                      (n, c)
                      ds1)
                   ds2 }) -}
3bc23057ca0bbb6d8ab5e3e89d025a32
  addPlayer ::
    Data.Text.Internal.Text -> State.GameState -> State.GameState
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U()>m,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Data.Text.Internal.Text) (state :: State.GameState) ->
                 state) -}
976bbbfde72f7779024dcd63e1f4be4a
  clients ::
    State.Room
    -> [(Data.Text.Internal.Text,
         Network.WebSockets.Connection.Connection)]
  RecSel Left State.Room
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: State.Room) ->
                 case ds of wild { State.Room ds1 ds2 ds3 -> ds2 }) -}
976bbbfde72f7779024dcd63e1f4be4a
  gameState :: State.Room -> State.GameState
  RecSel Left State.Room
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U())>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: State.Room) ->
                 case ds of wild { State.Room ds1 ds2 ds3 -> ds3 }) -}
267c3f0addd293837443ce75046450dc
  initial :: State.State
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True)
                (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ State.Room)
                  `cast`
                (Sym (State.N:State[0])) -}
76b36ed25d3460a634f78f91a88cc9f5
  initialRoom ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Network.WebSockets.Connection.Connection
    -> State.Room
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><L,U>m,
     Unfolding: InlineRule (3, True, False)
                (\ (r :: Data.Text.Internal.Text)
                   (n :: Data.Text.Internal.Text)
                   (c :: Network.WebSockets.Connection.Connection) ->
                 State.Room
                   r
                   (GHC.Types.:
                      @ (Data.Text.Internal.Text,
                         Network.WebSockets.Connection.Connection)
                      (n, c)
                      (GHC.Types.[]
                         @ (Data.Text.Internal.Text,
                            Network.WebSockets.Connection.Connection)))
                   State.GameState) -}
5e44225b27e61d8a5edd0a204bf2de2e
  initialState :: State.GameState
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True) State.GameState -}
949e8d8b6a86a2989c71b576dea8e89e
  join ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Network.WebSockets.Connection.Connection
    -> State.State
    -> State.State
  {- Arity: 4, Strictness: <L,U><S(SSS),1*U(U,U,U)><L,U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                State.join1
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <Network.WebSockets.Connection.Connection>_R
                 ->_R <State.State>_R
                 ->_R Sym (State.N:State[0])) -}
5424e5a441fe05877dbe8bc23c8fc35d
  join1 ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Network.WebSockets.Connection.Connection
    -> State.State
    -> Data.Map.Internal.Map Data.Text.Internal.Text State.Room
  {- Arity: 4, Strictness: <L,U><S(SSS),1*U(U,U,U)><L,U><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ (userRoomName :: Data.Text.Internal.Text)
                   (roomRoomName :: Data.Text.Internal.Text)
                   (conn :: Network.WebSockets.Connection.Connection)
                   (ds :: State.State) ->
                 State.$sinsertWith_$sgo8
                   @ State.Room
                   State.join2
                   roomRoomName
                   (State.Room
                      roomRoomName
                      (GHC.Types.:
                         @ (Data.Text.Internal.Text,
                            Network.WebSockets.Connection.Connection)
                         (userRoomName, conn)
                         (GHC.Types.[]
                            @ (Data.Text.Internal.Text,
                               Network.WebSockets.Connection.Connection)))
                      State.GameState)
                   ds `cast` (State.N:State[0])) -}
6d9e34856f364bd65f470b0c762b5209
  join2 :: State.Room -> State.Room -> State.Room
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(A,1*U,A)><S,1*U(U,1*U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (new :: State.Room)[OneShot] (old :: State.Room)[OneShot] ->
                 case old of wild { State.Room ds ds1 ds2 ->
                 State.Room
                   ds
                   (case new of wild1 { State.Room ds3 ds4 ds5 ->
                    GHC.Base.augment
                      @ (Data.Text.Internal.Text,
                         Network.WebSockets.Connection.Connection)
                      (\ @ b
                         (c :: (Data.Text.Internal.Text,
                                Network.WebSockets.Connection.Connection)
                               -> b -> b)[OneShot]
                         (n :: b)[OneShot] ->
                       GHC.Base.foldr
                         @ (Data.Text.Internal.Text,
                            Network.WebSockets.Connection.Connection)
                         @ b
                         c
                         n
                         ds4)
                      ds1 })
                   ds2 }) -}
d247e96ac103044072c0a6663b770ade
  leave ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text -> State.State -> State.State
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><S,1*U>,
     Unfolding: InlineRule (3, True, True)
                (\ (ds :: Data.Text.Internal.Text)
                   (ds1 :: Data.Text.Internal.Text)
                   (state :: State.State) ->
                 state) -}
976bbbfde72f7779024dcd63e1f4be4a
  roomName :: State.Room -> Data.Text.Internal.Text
  RecSel Left State.Room
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U(U,U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: State.Room) ->
                 case ds of wild { State.Room ds1 ds2 ds3 -> ds1 }) -}
322def29c284da5beec181754e9055fc
  rooms ::
    State.State
    -> Data.Map.Internal.Map Data.Text.Internal.Text State.Room
  RecSel Left State.State
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                State.rooms1 `cast` (<State.State>_R ->_R State.N:State[0]) -}
322def29c284da5beec181754e9055fc
  rooms1 :: State.State -> State.State
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: State.State) -> ds) -}
instance GHC.Classes.Eq [State.Room] = State.$fEqRoom
instance GHC.Classes.Ord [State.Room] = State.$fOrdRoom
instance GHC.Show.Show [State.GameState] = State.$fShowGameState
instance GHC.Show.Show [State.Room] = State.$fShowRoom
instance GHC.Show.Show [State.State] = State.$fShowState
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

