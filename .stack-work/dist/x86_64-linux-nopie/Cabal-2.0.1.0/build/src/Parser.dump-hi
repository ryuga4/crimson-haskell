
==================== FINAL INTERFACE ====================
2018-02-21 19:05:54.940571308 UTC

interface crimson-0.1.0.0-ZgWOCOdOiY63Gd2yNM7cG:Parser 8022
  interface hash: 9563051a1791d6bfba63292584ddbe59
  ABI hash: 709dd72ff3e2579dae08f12ab55bd49f
  export-list hash: 6cadcf87f1277ab3d4e75018b572d6a5
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 73bc9e3eaa434faf27f82b897cd131c7
  sig of: Nothing
  used TH splices: False
  where
exports:
  Parser.FromObject{Parser.fromObject}
  Parser.Parsable{Parser.fromValue}
  Parser.Person{Parser.Person age name surname}
module dependencies:
package dependencies: aeson-1.2.4.0 aeson-utils-0.3.0.2
                      array-0.5.2.0 attoparsec-0.13.2.2 base-4.10.1.0 base-compat-0.9.3
                      binary-0.8.5.1 bytestring-0.10.8.2 containers-0.5.10.2
                      deepseq-1.4.3.0 dlist-0.8.0.4 ghc-boot-th-8.2.2 ghc-prim-0.5.1.1
                      hashable-1.2.6.1 integer-gmp-1.0.1.0 integer-logarithms-1.0.2
                      primitive-0.6.3.0 random-1.1 scientific-0.3.5.2 tagged-0.8.5
                      template-haskell-2.12.0.0 text-1.2.2.2 time-1.8.0.2
                      time-locale-compat-0.1.1.3 transformers-0.5.2.0
                      unordered-containers-0.2.8.0 uuid-types-1.0.3 vector-0.12.0.1
orphans: attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         hashable-1.2.6.1:Data.Hashable.Generic text-1.2.2.2:Data.Text.Lazy
         text-1.2.2.2:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.2.2:Data.Text.Show
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.2.0:Control.Monad.Trans.Error
         base-4.10.1.0:GHC.Float base-4.10.1.0:GHC.Base
family instance modules: aeson-1.2.4.0:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.10.1.0:Control.Applicative base-4.10.1.0:Data.Complex
                         base-4.10.1.0:Data.Either base-4.10.1.0:Data.Functor.Compose
                         base-4.10.1.0:Data.Functor.Const
                         base-4.10.1.0:Data.Functor.Identity
                         base-4.10.1.0:Data.Functor.Product base-4.10.1.0:Data.Functor.Sum
                         base-4.10.1.0:Data.List.NonEmpty base-4.10.1.0:Data.Monoid
                         base-4.10.1.0:Data.Semigroup base-4.10.1.0:Data.Type.Equality
                         base-4.10.1.0:Data.Version base-4.10.1.0:Data.Void
                         base-4.10.1.0:GHC.Exts base-4.10.1.0:GHC.Generics
                         base-4.10.1.0:GHC.IO.Exception base-4.10.1.0:GHC.TypeLits
                         base-4.10.1.0:GHC.TypeNats containers-0.5.10.2:Data.IntMap.Internal
                         containers-0.5.10.2:Data.IntSet.Internal
                         containers-0.5.10.2:Data.Map.Internal
                         containers-0.5.10.2:Data.Sequence.Internal
                         containers-0.5.10.2:Data.Set.Internal containers-0.5.10.2:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.2.2:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.2.2:GHC.LanguageExtensions.Type
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray tagged-0.8.5:Data.Tagged
                         template-haskell-2.12.0.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2:Data.Text text-1.2.2.2:Data.Text.Lazy
                         unordered-containers-0.2.8.0:Data.HashMap.Base
                         unordered-containers-0.2.8.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  aeson-1.2.4.0:Data.Aeson f404093b56f3a9dbae90483ec892553f
import  -/  aeson-1.2.4.0:Data.Aeson.Types.Internal 698c7828c9c16bdb87303bb8f59bf55c
import  -/  aeson-utils-0.3.0.2:Data.Aeson.Utils 4d8bd9a76c03b76f8b11f45da80ff662
import  -/  base-4.10.1.0:Data.Either d7dae5d9bf298dee616e465c14b5d60e
import  -/  base-4.10.1.0:Data.Functor 2ffda4f936b8f474394d93205750aff3
import  -/  base-4.10.1.0:Data.Traversable 60ea7c2973e63de7d08d5d0269f96e67
import  -/  base-4.10.1.0:GHC.Base 782fd99b5e36f3698a26179a49afca64
import  -/  base-4.10.1.0:GHC.Num 6e1dc5d36d99a802edb39b92bb1923b8
import  -/  base-4.10.1.0:GHC.Show 0a8ce2b5e533d1c2cfb7954e6736be45
import  -/  base-4.10.1.0:Prelude 31945b7d0084063347fc52506d3a4020
import  -/  ghc-prim-0.5.1.1:GHC.Classes 93e2660065dce9329577e83d76d8f0d4
import  -/  integer-gmp-1.0.1.0:GHC.Integer.Type 5fa81108482c33b62ec3ac7464eece96
import  -/  scientific-0.3.5.2:Data.Scientific ee2c17b09618b1b0bef07b85d9189adb
import  -/  text-1.2.2.2:Data.Text 179ed20f3e41d2270f9a36dd7f638215
import  -/  text-1.2.2.2:Data.Text.Internal 965a1ec05875083803dc83d56dbb61f7
import  -/  unordered-containers-0.2.8.0:Data.HashMap.Base 8873eeeada0900b928e0a479053646ac
import  -/  unordered-containers-0.2.8.0:Data.HashMap.Strict 3431c0a20800054d2367c65bfaa82255
import  -/  vector-0.12.0.1:Data.Vector 85d00fd11fb6ff56955506f14ad48bd6
1e4b874e504fb144a874fb05ee262ee0
  $fFromObjectPerson :: Parser.FromObject Parser.Person
  DFunId
  {- Arity: 1, Strictness: <L,U>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parser.$fFromObjectPerson_$cfromObject
                  `cast`
                (Sym (Parser.N:FromObject[0] <Parser.Person>_N)) -}
aff61846f28a964bc49ed9bc15622361
  $fFromObjectPerson1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Parser.$fFromObjectPerson2) -}
26af7c5143662927d7fb373c5e8edd01
  $fFromObjectPerson2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("age"#) -}
b6ac4fc14bceb858d48fc9c9b51f3b96
  $fFromObjectPerson3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Parser.$fFromObjectPerson4) -}
2e2caf2456268d8a6a78e1996fafb5d7
  $fFromObjectPerson4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("surname"#) -}
7b4e2f7cde0db5d500900d8ae4ea1be7
  $fFromObjectPerson5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Parser.$fFromObjectPerson6) -}
8f810d93d625d34f8ce03a332fb145b8
  $fFromObjectPerson6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("name"#) -}
5e6f8d9b0b799e7be0f20f940c7c7e3b
  $fFromObjectPerson_$cfromObject ::
    Data.HashMap.Base.HashMap
      Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
    -> GHC.Base.Maybe Parser.Person
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (m :: Data.HashMap.Base.HashMap
                           Data.Text.Internal.Text Data.Aeson.Types.Internal.Value) ->
                 case Parser.$fFromObjectPerson5 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Parser.$w$slookup
                        @ Data.Aeson.Types.Internal.Value
                        ww1
                        ww2
                        ww3
                        m of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ Parser.Person
                   GHC.Base.Just x
                   -> case x of wild1 {
                        DEFAULT -> GHC.Base.Nothing @ Parser.Person
                        Data.Aeson.Types.Internal.String s
                        -> case Parser.$fFromObjectPerson3 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Parser.$w$slookup
                                  @ Data.Aeson.Types.Internal.Value
                                  ww5
                                  ww6
                                  ww7
                                  m of wild2 {
                             GHC.Base.Nothing -> GHC.Base.Nothing @ Parser.Person
                             GHC.Base.Just x1
                             -> case x1 of wild3 {
                                  DEFAULT -> GHC.Base.Nothing @ Parser.Person
                                  Data.Aeson.Types.Internal.String s1
                                  -> case Parser.$fFromObjectPerson1 of ww8 { Data.Text.Internal.Text ww9 ww10 ww11 ->
                                     case Parser.$w$slookup
                                            @ Data.Aeson.Types.Internal.Value
                                            ww9
                                            ww10
                                            ww11
                                            m of wild4 {
                                       GHC.Base.Nothing -> GHC.Base.Nothing @ Parser.Person
                                       GHC.Base.Just x2
                                       -> case x2 of wild5 {
                                            DEFAULT -> GHC.Base.Nothing @ Parser.Person
                                            Data.Aeson.Types.Internal.Number n
                                            -> case n of ww12 { Data.Scientific.Scientific ww13 ww14 ->
                                               case Data.Scientific.$wfloatingOrInteger
                                                      @ GHC.Types.Double
                                                      @ GHC.Integer.Type.Integer
                                                      GHC.Float.$fRealFloatDouble
                                                      GHC.Real.$fIntegralInteger
                                                      ww13
                                                      ww14 of wild6 {
                                                 Data.Either.Left ds
                                                 -> GHC.Base.Nothing @ Parser.Person
                                                 Data.Either.Right i
                                                 -> GHC.Base.Just
                                                      @ Parser.Person
                                                      (Parser.Person
                                                         s
                                                         s1
                                                         i) } } } } } } } } } } }) -}
10dbe231be8a574ba1019ccfd0c1bd20
  $fParsableBool :: Parser.Parsable GHC.Types.Bool
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parser.$fParsableBool_$cfromValue
                  `cast`
                (Sym (Parser.N:Parsable[0] <GHC.Types.Bool>_N)) -}
8a0f78dcd842c91ff83182026b1fb120
  $fParsableBool_$cfromValue ::
    Data.Aeson.Types.Internal.Value -> GHC.Base.Maybe GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Bool
                   Data.Aeson.Types.Internal.Bool b
                   -> GHC.Base.Just @ GHC.Types.Bool b }) -}
10dbe231be8a574ba1019ccfd0c1bd20
  $fParsableDouble :: Parser.Parsable GHC.Types.Double
  DFunId
  {- Arity: 1, Strictness: <S,1*U>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parser.$fParsableDouble_$cfromValue
                  `cast`
                (Sym (Parser.N:Parsable[0] <GHC.Types.Double>_N)) -}
a204f50f01090e0b69fb302299b4a0f0
  $fParsableDouble_$cfromValue ::
    Data.Aeson.Types.Internal.Value -> GHC.Base.Maybe GHC.Types.Double
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Double
                   Data.Aeson.Types.Internal.Number n
                   -> case n of ww1 { Data.Scientific.Scientific ww2 ww3 ->
                      case Data.Scientific.$wfloatingOrInteger
                             @ GHC.Types.Double
                             @ GHC.Integer.Type.Integer
                             GHC.Float.$fRealFloatDouble
                             GHC.Real.$fIntegralInteger
                             ww2
                             ww3 of wild1 {
                        Data.Either.Left i -> GHC.Base.Just @ GHC.Types.Double i
                        Data.Either.Right i
                        -> GHC.Base.Just
                             @ GHC.Types.Double
                             (GHC.Float.$fNumDouble_$cfromInteger i) } } }) -}
10dbe231be8a574ba1019ccfd0c1bd20
  $fParsableInteger :: Parser.Parsable GHC.Integer.Type.Integer
  DFunId
  {- Arity: 1, Strictness: <S,1*U>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parser.$fParsableInteger_$cfromValue
                  `cast`
                (Sym (Parser.N:Parsable[0] <GHC.Integer.Type.Integer>_N)) -}
0903ba5fd3e071281ce691630e3663e6
  $fParsableInteger_$cfromValue ::
    Data.Aeson.Types.Internal.Value
    -> GHC.Base.Maybe GHC.Integer.Type.Integer
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Integer.Type.Integer
                   Data.Aeson.Types.Internal.Number n
                   -> case n of ww1 { Data.Scientific.Scientific ww2 ww3 ->
                      case Data.Scientific.$wfloatingOrInteger
                             @ GHC.Types.Double
                             @ GHC.Integer.Type.Integer
                             GHC.Float.$fRealFloatDouble
                             GHC.Real.$fIntegralInteger
                             ww2
                             ww3 of wild1 {
                        Data.Either.Left ds1 -> GHC.Base.Nothing @ GHC.Integer.Type.Integer
                        Data.Either.Right i
                        -> GHC.Base.Just @ GHC.Integer.Type.Integer i } } }) -}
10dbe231be8a574ba1019ccfd0c1bd20
  $fParsableText :: Parser.Parsable Data.Text.Internal.Text
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Parser.$fParsableText_$cfromValue
                  `cast`
                (Sym (Parser.N:Parsable[0] <Data.Text.Internal.Text>_N)) -}
d7dbc1060f3d2ed01b7c4cd47d257858
  $fParsableText_$cfromValue ::
    Data.Aeson.Types.Internal.Value
    -> GHC.Base.Maybe Data.Text.Internal.Text
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT -> GHC.Base.Nothing @ Data.Text.Internal.Text
                   Data.Aeson.Types.Internal.String s
                   -> GHC.Base.Just @ Data.Text.Internal.Text s }) -}
10dbe231be8a574ba1019ccfd0c1bd20
  $fParsable[] :: Parser.Parsable a => Parser.Parsable [a]
  DFunId
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                Parser.$fParsable[]_$cfromValue
                  `cast`
                (forall (a :: <*>_N).
                 <Parser.Parsable a>_R ->_R Sym (Parser.N:Parsable[0] <[a]>_N)) -}
c2938fc236c7cab7f8ecac4d17604ce0
  $fParsable[]1 :: GHC.Base.Maybe [a]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ a -> GHC.Base.Just @ [a] (GHC.Types.[] @ a)) -}
10dbe231be8a574ba1019ccfd0c1bd20
  $fParsable[]_$cfromValue ::
    Parser.Parsable a =>
    Data.Aeson.Types.Internal.Value -> GHC.Base.Maybe [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ a
                   ($dParsable :: Parser.Parsable a)
                   (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT -> GHC.Base.Nothing @ [a]
                   Data.Aeson.Types.Internal.Array a1
                   -> case a1 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> GHC.Base.Maybe [a]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.>=# ww dt1) of wild2 {
                            GHC.Types.False
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               case $dParsable `cast` (Parser.N:Parsable[0] <a>_N) ipv of wild3 {
                                 GHC.Base.Nothing -> GHC.Base.Nothing @ [a]
                                 GHC.Base.Just x
                                 -> case $wgo (GHC.Prim.+# ww 1#) of wild4 {
                                      GHC.Base.Nothing -> GHC.Base.Nothing @ [a]
                                      GHC.Base.Just y
                                      -> GHC.Base.Just @ [a] (GHC.Types.: @ a x y) } } }
                            GHC.Types.True -> Parser.$fParsable[]1 @ a }
                      } in
                      $wgo 0# } }) -}
9292bb45c1813acb761fb295ea448128
  $fShowPerson :: GHC.Show.Show Parser.Person
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Parser.Person
                  Parser.$fShowPerson_$cshowsPrec
                  Parser.$fShowPerson_$cshow
                  Parser.$fShowPerson_$cshowList -}
9292bb45c1813acb761fb295ea448128
  $fShowPerson1 :: Parser.Person -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U(U,U,U),1*U(U,U,U),U)><L,U>,
     Unfolding: (\ (w :: Parser.Person) (w1 :: GHC.Base.String) ->
                 case w of ww { Parser.Person ww1 ww2 ww3 ->
                 Parser.$w$cshowsPrec 0# ww1 ww2 ww3 w1 }) -}
772927d35d911807678cebdfac63f0b6
  $fShowPerson2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
2c4f770d82610d86b5e5aaaae9862782
  $fShowPerson3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("age = "#) -}
95ccc458070a985595d2f3b70b8de2ec
  $fShowPerson4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("surname = "#) -}
f3dbaa0a919fc75a2cb8a336eaee31b9
  $fShowPerson5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("name = "#) -}
d736511ab24cf5812819195949067695
  $fShowPerson6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Person {"#) -}
acec347aee5476a7648f007619479dea
  $fShowPerson7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Parser.$fShowPerson2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9292bb45c1813acb761fb295ea448128
  $fShowPerson_$cshow :: Parser.Person -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U,U,U),1*U(U,U,U),U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Parser.Person) ->
                 case w of ww { Parser.Person ww1 ww2 ww3 ->
                 Parser.$w$cshow ww1 ww2 ww3 }) -}
9292bb45c1813acb761fb295ea448128
  $fShowPerson_$cshowList :: [Parser.Person] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Parser.Person
                   Parser.$fShowPerson1) -}
9292bb45c1813acb761fb295ea448128
  $fShowPerson_$cshowsPrec ::
    GHC.Types.Int -> Parser.Person -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(U,U,U),1*U(U,U,U),U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Parser.Person)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Parser.Person ww3 ww4 ww5 ->
                 Parser.$w$cshowsPrec ww1 ww3 ww4 ww5 w2 } }) -}
e39d5e0aac03b5d1bb7758698be2962b
  $tc'C:FromObject :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1830886283422173397##
                   8281700781613345425##
                   Parser.$trModule
                   Parser.$tc'C:FromObject2
                   1#
                   Parser.$tc'C:FromObject1) -}
ed9d7f19d0bfe334a674986edd627e71
  $tc'C:FromObject1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c7790fdbb6a320a28f7bbbbe82bb5355
  $tc'C:FromObject2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Parser.$tc'C:FromObject3) -}
4bbb81d1c448da03a5c8e025d4d994cc
  $tc'C:FromObject3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:FromObject"#) -}
8f5d836198db7a62de7673043a6abc96
  $tc'C:Parsable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1526105700104444385##
                   3226561135243206803##
                   Parser.$trModule
                   Parser.$tc'C:Parsable2
                   1#
                   Parser.$tc'C:Parsable1) -}
30f4d50b0f2d8f5382396a290abaa3aa
  $tc'C:Parsable1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ee44501c2ac8be0a981781dca9ce6c70
  $tc'C:Parsable2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Parser.$tc'C:Parsable3) -}
eb3142757391378c8f6792d1b9e4006a
  $tc'C:Parsable3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:Parsable"#) -}
dc4ebc7ec63bc707993fdab68b12c686
  $tc'Person :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15607313110759488086##
                   8593535723239544959##
                   Parser.$trModule
                   Parser.$tc'Person2
                   0#
                   Parser.$tc'Person1) -}
f57de36cb7cba2e25f41b385da74be04
  $tc'Person1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
08e08ff57f257def322d5b492d7614cf
  $tc'Person2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Parser.$tc'Person3) -}
27e4981ead40f088f00a26e5f535d3a8
  $tc'Person3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Person"#) -}
d7fbd42b1265a90bc7f9e92fe0289b46
  $tcFromObject :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6637954243874809732##
                   5881608984425172971##
                   Parser.$trModule
                   Parser.$tcFromObject2
                   0#
                   Parser.$tcFromObject1) -}
81fa4365138c0d1ca3a707f05b023d74
  $tcFromObject1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5e5b94353efff12df40827e9e76f9909
  $tcFromObject2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Parser.$tcFromObject3) -}
25724bd4da79b3c79a4bb7b96a919981
  $tcFromObject3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FromObject"#) -}
8121f287851b6f8e08f550b6698786f7
  $tcParsable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7796577335256080765##
                   17415370914903875362##
                   Parser.$trModule
                   Parser.$tcParsable1
                   0#
                   Parser.$tcFromObject1) -}
66d2bc0e4091c5b68aa04f12f1a28556
  $tcParsable1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Parser.$tcParsable2) -}
00094a9eccc3945a28193b61287a5f83
  $tcParsable2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Parsable"#) -}
cb900683228eaf9899bb21e34c0a1813
  $tcPerson :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6952592366393413754##
                   2598221942015377923##
                   Parser.$trModule
                   Parser.$tcPerson1
                   0#
                   GHC.Types.krep$*) -}
4dae1ccdac874836e1c893580f710b7a
  $tcPerson1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Parser.$tcPerson2) -}
11c1329a1b1be227b9f3e6a130e30c99
  $tcPerson2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Person"#) -}
d3d669ba6b020c3e5cd1a9ffc4183d99
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Parser.$trModule3
                   Parser.$trModule1) -}
8f04a9e30885ef56f5c6fe2702ae818c
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Parser.$trModule2) -}
af2f553f58f66b84cc7cae43772442e5
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Parser"#) -}
234a71f620341ddcdd7dccc550fc7e85
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Parser.$trModule4) -}
2cd9dfda3ce5af82f2c69d5734f2f759
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("crimson-0.1.0.0-ZgWOCOdOiY63Gd2yNM7cG"#) -}
e926d8e429da079964ac5379007e570e
  $w$cshow ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> GHC.Integer.Type.Integer
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,1*U(U,U,U)><L,1*U(U,U,U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: Data.Text.Internal.Text)
                   (ww1 :: Data.Text.Internal.Text)
                   (ww2 :: GHC.Integer.Type.Integer) ->
                 GHC.CString.unpackAppendCString#
                   Parser.$fShowPerson6
                   (GHC.CString.unpackAppendCString#
                      Parser.$fShowPerson5
                      (case Data.Text.Show.$w$cshowsPrec
                              ww
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 GHC.Show.showCommaSpace1
                                 (GHC.CString.unpackAppendCString#
                                    Parser.$fShowPerson4
                                    (case Data.Text.Show.$w$cshowsPrec
                                            ww1
                                            (GHC.Base.++
                                               @ GHC.Types.Char
                                               GHC.Show.showCommaSpace1
                                               (GHC.CString.unpackAppendCString#
                                                  Parser.$fShowPerson3
                                                  (case GHC.Show.$w$cshowsPrec4
                                                          0#
                                                          ww2
                                                          Parser.$fShowPerson7 of ww3 { (#,#) ww4 ww5 ->
                                                   GHC.Types.:
                                                     @ GHC.Types.Char
                                                     ww4
                                                     ww5 }))) of ww3 { (#,#) ww4 ww5 ->
                                     GHC.Types.:
                                       @ GHC.Types.Char
                                       ww4
                                       ww5 }))) of ww3 { (#,#) ww4 ww5 ->
                       GHC.Types.: @ GHC.Types.Char ww4 ww5 }))) -}
becfc27ede8036c80c3dfb7412cc26be
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> GHC.Integer.Type.Integer
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5,
     Strictness: <S,U><L,1*U(U,U,U)><L,1*U(U,U,U)><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Data.Text.Internal.Text)
                   (ww2 :: Data.Text.Internal.Text)
                   (ww3 :: GHC.Integer.Type.Integer)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       Parser.$fShowPerson6
                       (GHC.CString.unpackAppendCString#
                          Parser.$fShowPerson5
                          (case Data.Text.Show.$w$cshowsPrec
                                  ww1
                                  (GHC.Base.++
                                     @ GHC.Types.Char
                                     GHC.Show.showCommaSpace1
                                     (GHC.CString.unpackAppendCString#
                                        Parser.$fShowPerson4
                                        (case Data.Text.Show.$w$cshowsPrec
                                                ww2
                                                (GHC.Base.++
                                                   @ GHC.Types.Char
                                                   GHC.Show.showCommaSpace1
                                                   (GHC.CString.unpackAppendCString#
                                                      Parser.$fShowPerson3
                                                      (case GHC.Show.$w$cshowsPrec4
                                                              0#
                                                              ww3
                                                              (GHC.CString.unpackAppendCString#
                                                                 Parser.$fShowPerson2
                                                                 x) of ww4 { (#,#) ww5 ww6 ->
                                                       GHC.Types.:
                                                         @ GHC.Types.Char
                                                         ww5
                                                         ww6 }))) of ww4 { (#,#) ww5 ww6 ->
                                         GHC.Types.:
                                           @ GHC.Types.Char
                                           ww5
                                           ww6 }))) of ww4 { (#,#) ww5 ww6 ->
                           GHC.Types.: @ GHC.Types.Char ww5 ww6 }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w)) }) -}
126b96261cac9d4b1363a308b317c5f2
  $w$slookup ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> GHC.Base.Maybe v
  {- Arity: 4, HasNoCafRefs, Strictness: <S,U><S,U><S,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ v
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w :: Data.HashMap.Base.HashMap Data.Text.Internal.Text v) ->
                 case {__pkg_ccall hashable-1.2.6.1 GHC.Prim.ByteArray#
                                                    -> GHC.Prim.Int#
                                                    -> GHC.Prim.Int#
                                                    -> GHC.Prim.Int#
                                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                          GHC.Prim.Int# #)}
                        ww
                        (GHC.Prim.uncheckedIShiftL# ww1 1#)
                        (GHC.Prim.uncheckedIShiftL# ww2 1#)
                        -2578643520546668380#
                        GHC.Prim.realWorld# of wild1 { (#,#) ds1 ds2 ->
                 Parser.$wpoly_go1
                   @ v
                   (GHC.Prim.int2Word# ds2)
                   ww
                   ww1
                   ww2
                   0#
                   w }) -}
72772f275e3d042105d68c1b5e8954c6
  $wpoly_go1 ::
    GHC.Prim.Word#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> GHC.Base.Maybe v
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>, Inline: [0] -}
a485abc13a368bdbea40ef9ce560d94f
  $wpoly_go2 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Base.Maybe v
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,U><L,U><L,U><L,U><S,U><S,U>, Inline: [0] -}
1e4b874e504fb144a874fb05ee262ee0
  class FromObject o where
    fromObject :: Data.HashMap.Base.HashMap
                    Data.Text.Internal.Text Data.Aeson.Types.Internal.Value
                  -> GHC.Base.Maybe o
    {-# MINIMAL fromObject #-}
10dbe231be8a574ba1019ccfd0c1bd20
  class Parsable x where
    fromValue :: Data.Aeson.Types.Internal.Value -> GHC.Base.Maybe x
    {-# MINIMAL fromValue #-}
9292bb45c1813acb761fb295ea448128
  data Person
    = Person {name :: Data.Text.Internal.Text,
              surname :: Data.Text.Internal.Text,
              age :: GHC.Integer.Type.Integer}
9292bb45c1813acb761fb295ea448128
  age :: Parser.Person -> GHC.Integer.Type.Integer
  RecSel Left Parser.Person
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Parser.Person) ->
                 case ds of wild { Parser.Person ds1 ds2 ds3 -> ds3 }) -}
9292bb45c1813acb761fb295ea448128
  name :: Parser.Person -> Data.Text.Internal.Text
  RecSel Left Parser.Person
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U(U,U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Parser.Person) ->
                 case ds of wild { Parser.Person ds1 ds2 ds3 -> ds1 }) -}
9292bb45c1813acb761fb295ea448128
  surname :: Parser.Person -> Data.Text.Internal.Text
  RecSel Left Parser.Person
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSL),1*U(A,1*U(U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Parser.Person) ->
                 case ds of wild { Parser.Person ds1 ds2 ds3 -> ds2 }) -}
instance Parser.FromObject [Parser.Person]
  = Parser.$fFromObjectPerson
instance Parser.Parsable [GHC.Types.Bool] = Parser.$fParsableBool
instance Parser.Parsable [GHC.Types.Double]
  = Parser.$fParsableDouble
instance Parser.Parsable [GHC.Integer.Type.Integer]
  = Parser.$fParsableInteger
instance Parser.Parsable [Data.Text.Internal.Text]
  = Parser.$fParsableText
instance Parser.Parsable [[]] = Parser.$fParsable[]
instance GHC.Show.Show [Parser.Person] = Parser.$fShowPerson
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

